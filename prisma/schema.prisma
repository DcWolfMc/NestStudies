// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  INTERN
  ENGINEER
  ADMIN
}

model Product {
  id                 Int       @id @default(autoincrement())
  title              String    @unique
  description        String
  categoryTitle      String
  category           Category   @relation(fields: [categoryTitle], references: [title])
  price              Float
  discountPercentage Float
  rating             Float
  stock              Int
  tags               String[]
  brand              String?
  dimensions         Json
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  comments           Comment[]
}

model Category {
  id Int @id @default(autoincrement())
  title String @unique
  products Product[]
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  refreshToken RefreshToken?
  comments     Comment[]

  @@unique([id, email, name])
}

model RefreshToken {
  token          String   @id @default(uuid())
  createdAt      DateTime @default(now())
  expirationDate DateTime

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  userEmail String   @unique
  userName  String
  user      User     @relation(fields: [userId, userEmail, userName], references: [id, email, name])
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  comment   String
  rating    Int
  createdAt DateTime @default(now())
}

// model Purchase {
//   id    String    @id   @default(uuid())
//   products  Product[]
//   totalPrice  Float

//   PurchaseMethod String
//   createdAt DateTime @default(now())

// }
